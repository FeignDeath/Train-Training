%% File that is called when we want our solution to be malfunction-ready;
%% It does all the loading/saving (that does is not done 
%% in another file) and takes into account the waiting 
%% turns due to malfunction

% SAVING
% save map
save(cell_useful(U,V)) :- cell_useful(U,V).
save(trackparts(Pos,D1,D2)) :- trackparts(Pos,D1,D2).
save(subcell(Pos,D)) :- subcell(Pos,D).
save(edge(U,V)) :- edge(U,V).
% malfunction-forwarding
save(malfunction_custom(A,D,T)):- malfunction_custom(A,D,T).

% LOADING
% load map
cell_useful(U,V) :- load(cell_useful(U,V)).
trackparts(Pos,D1,D2) :- load(trackparts(Pos,D1,D2)).
subcell(Pos,D) :- load(subcell(Pos,D)).
edge(U,V):- load(edge(U,V)).
% base problem
end(A,B,C):- load(end(A,B,C)).
train(A):- load(train(A)).
start(A,P,T,D):- load(start(A,P,T,D)).
% train information
affected(A) :- malfunction(A,_,_).
affected(A) :- 
	affected(B), malfunction(_,_,T),time_delay(T+1),
	load(at(B,T,(V,_))), 
	load(at(A,T+1,(V,_))).
malfunction_custom(B,1,T):-affected(B), malfunction(_,_,T).

at(A,T,P):- load(at(A,T,P)),malfunction(A,_,TLast),T < TLast.
at(A,T,P):- load(at(A,T,P)),malfunction(B,_,TLast),A<B,T <= TLast.
% malfunction-forwarding
malfunction_custom(A,D,T):-load(malfunction_custom(A,D,T)).
